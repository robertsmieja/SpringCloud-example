buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.netflix.nebula:nebula-docker-plugin:1.2.3"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

task('startCluster') {

}

subprojects {
    apply plugin: 'application'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'nebula.docker'
    apply plugin: 'org.springframework.boot'

    group = 'com.robertsmieja.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }

    springBoot {
        buildInfo()
    }

    ext {
        springCloudVersion = 'Finchley.M9'
    }

    dependencies {
        annotationProcessor 'org.projectlombok:lombok'

        compile 'org.apache.commons:commons-lang3:3.7'
        compile 'org.projectlombok:lombok'
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.springframework.cloud:spring-cloud-starter-config'
        compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
        compile 'org.springframework.cloud:spring-cloud-starter-zipkin'
//        compile 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'

        runtime 'org.springframework.boot:spring-boot-devtools'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    tasks['eclipse'].dependsOn tasks['cleanEclipse']

    boolean hasSpringShell = project.configurations.'runtimeClasspath'.allDependencies.matching { Dependency dependency ->
        dependency.name == 'spring-shell-starter'
    }

    if(!hasSpringShell) {
        rootProject.tasks['startCluster'].dependsOn tasks['bootRun']
    }
}
